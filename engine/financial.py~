#encoding=utf-8
from django.http import HttpResponse,HttpResponseRedirect
from django.template import Template, Context
from django.template import RequestContext
from django.shortcuts  import render_to_response
from django.utils import simplejson
from django.db.models import Q
from models import Bill,Account,Project,User,Kindname,Protemplate,Kindcontent,Prokindaccount,Tempname,Accountadd_record,Billdevice_record
import datetime
import string

#############################################################################################
def account_create_edit(request):#ok
    pro_uncreate = Project.objects.filter(iscreate = False)
    pro_create = Account.objects.filter(money_cost = 0)
    return render_to_response("account_create_edit.html",locals())
    
    
def accountcreate(request):#ok
    try:
        proid = request.POST["accid"]
        proobj = Project.objects.get(pid = proid)
        kind = proobj.prokind
        if proobj.iscreate == False:
        
            temp_uncreate = Protemplate.objects.filter(prokind = kind)
            pro_uncreate = Project.objects.filter(iscreate = False)
            pro_create = Account.objects.filter(money_cost = 0)
        else:
            pro_uncreate = Project.objects.filter(iscreate = False)
            pro_create = Account.objects.filter(money_cost = 0)
            temp_create = Prokindaccount.objects.filter( proid = proid)
        return render_to_response("account_create_edit.html",locals())
    except:
        error='请选择项目号'
        pro_uncreate = Project.objects.filter(iscreate = False)
        pro_create = Account.objects.filter(money_cost = 0)
        return render_to_response("account_create_edit.html",locals())


def accountedit(request):
    try:
        proid = request.POST["proid"]
        proobj = Project.objects.get(pid = proid)
        kind = proobj.prokind
        if proobj.iscreate == False:

            temp_uncreate = Protemplate.objects.filter(prokind = kind)
            pro_uncreate = Project.objects.filter(iscreate = False)
            pro_create = Account.objects.filter(money_cost = 0)
        else:
            pro_uncreate = Project.objects.filter(iscreate = False)
            pro_create = Account.objects.filter(money_cost = 0)
            temp_create = Prokindaccount.objects.filter( proid = proid)
            for i in temp_create:
                i.money_sum = i.money_sum / 10000
            obj1 = Account.objects.get(project_id = proid)
            money = obj1.money_sum / 10000
            moneyfirst = obj1.money_act / 10000
        return render_to_response("account_create_edit.html",locals())
    except:
        error='请选择项目号'
        pro_uncreate = Project.objects.filter(iscreate = False)
        pro_create = Account.objects.filter(money_cost = 0)
        return render_to_response("account_create_edit.html",locals())

def accountcreate_create(request):
    account=request.GET["account"]
    kindname=request.GET["kindname"]
    sum1=string.atof(request.GET["sum1"])
    proid=request.GET["proid"]
    firstm=string.atof(request.GET["firstm"])
    accid = request.GET["accid"]
    
    d1=Project.objects.get(pid = proid)
    str1=kindname
    str2=account
    s1 = str1.split(',')
    s2 = str2.split(',')
    
    if d1.iscreate == False:
        for i  in range(0,len(s1)-1):
            c1=s1[i]
            c2=string.atof(s2[i])
            b=Prokindaccount( proid = d1,payname = c1,money_sum = (c2 * 10000),money_cost = 0,buff = 0,)
            b.save()
        d1.iscreate=True
        d1.save()
        a=Account(project_id=d1,money_sum = (sum1 * 10000),money_act = (firstm * 10000),money_cost = 0,account_id = accid,)
        a.save()
        e=Accountadd_record(project_id = d1,time = datetime.datetime.now(),money_add = (firstm * 10000),)
        e.save()

    else:
        Prokindaccount.objects.filter(proid = proid).delete()
        for i  in range(0,len(s1)-1):
            c1=s1[i]
            c2=string.atof(s2[i])
            b=Prokindaccount( proid = d1,payname = c1,money_sum = (c2*10000),money_cost = 0,buff = 0,)
            b.save()
        Accountadd_record.objects.get(project_id = proid).delete()
        e=Accountadd_record(project_id = d1,time = datetime.datetime.now(),money_add = (firstm * 10000),)
        e.save()
        a=Account.objects.get(project_id = proid)
        a.money_sum= (sum1 * 10000)
        a.money_act = (firstm * 10000)
        a.account_id = accid
        a.save()
    alldata=[]
    onedata = [0,0]
    onedata[0] = "1"
    onedata[1] = '2'
    alldata.append(onedata)
    data = simplejson.dumps(alldata)
    return HttpResponse(data, 'application/javascript')
    
###############################################################################################################

###############################################################################################################

def accountinput_create(request):
    proshow = Account.objects.all()
    return render_to_response("accountinput_create.html",locals())

def accountinput_create_select(request):
    proshow = Account.objects.all()
    proid = request.POST["accid"]
    proobj = Project.objects.get(pid = proid)
    kind = Protemplate.objects.filter(prokind = proobj.prokind)
    acid = Account.objects.get(project_id = proid)
    return render_to_response("accountinput_create.html",locals())
    
    
def accountcreate_kindcontent_show(request):
    kindname=request.GET["kind"]
    i=[]
    obj = Kindcontent.objects.filter(name = kindname)
    for c in obj:
        i.append(c.content)
    data = simplejson.dumps(i)
    return HttpResponse(data, 'application/javascript')

def accountinput_create_input(request):
    time=request.GET["time"]
    money=request.GET["money"]
    pid=request.GET["pid"]
    billid=request.GET["billid"]
    note=request.GET["note"]
    paykind=request.GET["paykind"]
    namecontent=request.GET["namecontent"]
    numcontent = request.GET["numcontent"]
    person_id=request.session["Uid"]
    s=Bill(time = time,name = namecontent,money = string.atof(money),transactor = person_id,note = note,paykind = paykind,proid = pid,change = False, bill_id=billid,)
    s.save()
    str1=namecontent
    str2=numcontent
    s1 = str1.split(',')
    s2 = str2.split(',')
    if numcontent != "":
        for i  in range(0,len(s2)-1):
            bsave = Billdevice_record(Bill_sqlid = s.id, proid = pid,name = s1[i],number = string.atof(s2[i]),paykind = paykind,)
            bsave.save()
    a=Account.objects.get(project_id=pid)
    a.money_cost =+a.money_cost+string.atof(money)
    a.save()
    b=Prokindaccount.objects.get(proid=pid,payname=paykind)
    b.money_cost=b.money_cost+string.atof(money)
    b.save()
    alldata=[]
    onedata = [0,0]
    onedata[0] = "1"
    onedata[1] = '2'
    alldata.append(onedata)
    data = simplejson.dumps(alldata)
    return HttpResponse(data, 'application/javascript')
    
###############################################################################################

############################################################################################

def billquery(request):
    account_content = Account.objects.all()
    return render_to_response("billquery.html",locals())

def billquery_show(request):
    account_content = Account.objects.all()
    result = Bill.objects.all()
    if 'time' in request.POST:
        starttime = request.POST["starttime"]
        endtime = request.POST["endtime"]
        t1 = datetime.datetime.strptime(starttime, "%Y-%m-%d").date()
        t2 = datetime.datetime.strptime(endtime, "%Y-%m-%d").date()
        if t2 < t1:
            error="时间选择出错"
            return render_to_response("billquery.html",locals())
        result = result.filter(time__lte=endtime).filter(time__gte=starttime)
        proid = request.POST["proid"]

    if 'pid' in request.POST:
        print 1
        proid = request.POST["proid"]
        if proid != u'全部' and proid != '':
            print 2
            result = result.filter(proid=proid)
            kind_list = request.REQUEST.getlist("propaykind")
            if kind_list[0] != u'全部':
                for i in kind_list:
                    result = result.filter(paykind = i)
        if proid ==u'全部':
            kind_list = request.REQUEST.getlist("propaykind")
            if kind_list[0] != u'全部':
                for i in kind_list:
                    result = result.filter(paykind = i)
        if proid =='':
            error="请选择项目号"
            return render_to_response("billquery.html",locals())
    if 'money_ref' in request.POST:
        result = result.filter(money__gte = string.atof(request.POST["money"]))
    show = True
    for i in result:
        i.time = i.time.strftime('%Y-%m-%d')
    return render_to_response("billquery.html",locals())
    
def billprocontent_show(request):
    proid=request.GET["proid"]
    if proid==u'全部':
        kind = Kindname.objects.all()
        i=[]
        for c in kind:
            i.append(c.name)
    else:
        tempobj = Project.objects.get(pid = proid)
        kind = Protemplate.objects.filter(prokind = tempobj.prokind)
        i=[]
        for c in kind:
            i.append(c.payname)
    data = simplejson.dumps(i)
    return HttpResponse(data, 'application/javascript')
#########################################################################################################

#########################################################################################################


def accountadd(request):
    account_add_edit = Account.objects.all()
    return render_to_response("accountadd.html",locals())
    
def accountadd_add(request):
    account_add_edit = Account.objects.all()
    proid=request.POST["addname"]
    account_obj = Account.objects.get(project_id=proid)
    account_obj.money_sum = account_obj.money_sum / 10000
    account_obj.money_act = account_obj.money_act / 10000
    record_obj = Accountadd_record.objects.filter(project_id=proid).order_by("time")
    for i in record_obj:
        i.money_add = i.money_add / 10000
        i.time = i.time.strftime('%Y-%m-%d')
    show=True
    add_add = True
    return render_to_response("accountadd.html",locals())
    
def accountadd_edit(request):
    account_add_edit = Account.objects.all()
    proid = request.POST["editname"]
    account_obj = Account.objects.get(project_id=proid)
    account_obj.money_sum = account_obj.money_sum / 10000
    account_obj.money_act = account_obj.money_act / 10000
    record_obj = Accountadd_record.objects.filter(project_id=proid).order_by("time")
    for i in record_obj:
        i.money_add = i.money_add / 10000
        i.time = i.time.strftime('%Y-%m-%d')
    show=True
    add_edit=True
    return render_to_response("accountadd.html",locals())
    
def accountadd_add_input(request):
    proid=request.POST["objid"]
    money=request.POST["addmoney"]
 
    d1 = Project.objects.get(pid = proid)
    obj1 = Account.objects.get(project_id=proid)
    obj1.money_act = obj1.money_act+(string.atof(money)*10000)
    obj1.save()
    obj2 = Accountadd_record( project_id = d1,time=datetime.datetime.now(),money_add=(string.atof(money)*10000),)
    obj2.save()
    error='录入成功'
    account_add_edit = Account.objects.all()
    return render_to_response("accountadd.html",locals())

def accountadd_edit_input(request):
    proid=request.POST["objid"]
    money=request.POST["editmoney"]
    obj1 = Accountadd_record.objects.filter(project_id=proid).order_by("-time")[0]
    obj2 = Account.objects.get(project_id=proid)
    
    obj2.money_act = obj2.money_act - obj1.money_add + string.atof(money) * 10000
    obj2.save()
    obj1.money_add=string.atof(money) * 10000
    obj1.time=datetime.datetime.now()
    obj1.save()
    error='修改成功'
    account_add_edit = Account.objects.all()
    return render_to_response("accountadd.html",locals())

#######################################################################################
